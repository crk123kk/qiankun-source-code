{"version":3,"file":"single-spa.js","sources":["../../src/applications/app.helpers.js","../../src/lifecycles/bootstrap.js","../../src/lifecycles/load.js","../../src/lifecycles/unmount.js","../../src/lifecycles/mount.js","../../src/start.js","../../src/navigations/navigator-events.js","../../src/navigations/reroute.js","../../src/applications/app.js"],"sourcesContent":["// 描述应用的整个状态\r\n\r\n// 应用刚刚初始化，应用初始状态\r\nexport const NOT_LOADED = 'NOT_LOADED';\r\n// 调用了registerApplication方法， 加载资源的时候\r\nexport const LOADING_SOURCE_CODE = 'LOADING_SOURCE_CODE';\r\n// 还没调用bootstrap方法\r\nexport const NOT_BOOTSTRAPPED = 'NOT_BOOTSTRAPPED';\r\n// 启动中\r\nexport const BOOTSTRAPPING = 'BOOTSTRAPPING';\r\n// 没有调用 mount 方法\r\nexport const NOT_MOUNTED = 'NOT_MOUNTED';\r\n// 正在挂载中\r\nexport const MOUNTING = 'MOUNTING';\r\n// 挂载完毕\r\nexport const MOUNTED = 'MOUNTED';\r\n// 更新中\r\nexport const UPDATING = 'UPDATING';\r\n// 接触挂载\r\nexport const UNMOUNTING = 'UNMOUNTING';\r\n// 完全卸载\r\nexport const UNLOADING = 'UNLOADING';\r\n// 加载资源发生错误\r\nexport const LOAD_ERR = 'LOAD_ERR';\r\n// 代码发生异常时\r\nexport const SKIP_BECAUSE_BROKEN = 'SKIP_BECAUSE_BROKEN';\r\n\r\n// 当前应用是否被激活\r\nexport function isActive(app) {\r\n  return app.status === MOUNTED;\r\n}\r\n\r\n// 当前这个应用是否要被激活：当路由匹配成功的时候，进行激活\r\nexport function shouldBeActive(app) {\r\n  return app.activeWhen(window.location);\r\n}\r\n","import {\r\n  BOOTSTRAPPING,\r\n  NOT_BOOTSTRAPPED,\r\n  NOT_MOUNTED,\r\n} from '../applications/app.helpers';\r\n\r\nexport async function toBootstrapPromise(app) {\r\n  if (app.status !== NOT_BOOTSTRAPPED) {\r\n    return app;\r\n  }\r\n  app.status = BOOTSTRAPPING;\r\n  await app.bootstrap(app.customProps);\r\n  app.status = NOT_MOUNTED;\r\n  return app;\r\n}\r\n","import {\r\n  LOADING_SOURCE_CODE,\r\n  NOT_BOOTSTRAPPED,\r\n} from '../applications/app.helpers';\r\n\r\n/**\r\n * 最终返回的是一个多个方法组合成的的一个方法\r\n */\r\nfunction flattenFnArray(fns) {\r\n  fns = Array.isArray(fns) ? fns : [fns];\r\n\r\n  return (props) => {\r\n    // 最终返回的是一个链式调用的Promise, 通过Promse链来链式调用\r\n    // Promise.resolve().then(() => fn1(props)).then(() => fn2(props));\r\n    return fns.reduce((p, fn) => p.then(() => fn(props)), Promise.resolve());\r\n  };\r\n}\r\n\r\nexport async function toLoadPromise(app) {\r\n  // 这里需要做个缓存，避免因为同步异步问题而多次调用\r\n  if (app.loadPromise) {\r\n    return app.loadPromise;\r\n  }\r\n\r\n  // 如果loadPromise不存在，则是第一次加载，则将封装好的Promise对象返回给loadPromise中 （即：缓存）\r\n  // 当再次调用app.loadPromise的时候，则用的就还是这个返回的loadPromise方法\r\n  return (app.loadPromise = Promise.resolve().then(async () => {\r\n    app.status = LOADING_SOURCE_CODE;\r\n    let { bootstrap, mount, unmount } = await app.loadApp(app.customProps);\r\n    // 此时还未调用bootstrap方法\r\n    app.status = NOT_BOOTSTRAPPED;\r\n\r\n    // 因为传入的bootstrap可能是异步函数的数组，这时候我们希望将其组合起来 compose\r\n    app.bootstrap = flattenFnArray(bootstrap);\r\n    app.mount = flattenFnArray(mount);\r\n    app.unmount = flattenFnArray(unmount);\r\n\r\n    // 当方法调用结束，需要将缓存清空\r\n    delete app.loadPromise;\r\n    return app;\r\n  }));\r\n}\r\n","import { MOUNTED, NOT_MOUNTED, UNMOUNTING } from '../applications/app.helpers';\r\n\r\nexport async function toUnmountPromise(app) {\r\n  // 当前应用没有被挂载的应用则直接什么都不用做\r\n  if (app.status != MOUNTED) {\r\n    return app;\r\n  }\r\n  app.status = UNMOUNTING;\r\n  await app.unmount(app.customProps);\r\n  app.status = NOT_MOUNTED;\r\n  return app;\r\n}\r\n","import { MOUNTED, MOUNTING, NOT_MOUNTED } from '../applications/app.helpers';\r\n\r\nexport async function toMountPromise(app) {\r\n  if (app.status !== NOT_MOUNTED) {\r\n    return app;\r\n  }\r\n  app.status = MOUNTING;\r\n  await app.mount(app.customProps);\r\n  app.status = MOUNTED;\r\n  return app;\r\n}\r\n","import { reroute } from './navigations/reroute';\r\n\r\n// 哨兵变量\r\nexport let started = false;\r\n\r\nexport function start() {\r\n  // 需要挂载应用\r\n  started = true;\r\n  // 除了加载应用还需要挂载应用\r\n  reroute();\r\n}\r\n","import { reroute } from './reroute';\r\n\r\nexport const routingEventsListeningTo = ['hashchange', 'popstate'];\r\n\r\nfunction urlReroute() {\r\n  reroute([], arguments);\r\n}\r\n\r\nconst capturedEventListeners = {\r\n  hashchange: [],\r\n  popstate: [],\r\n};\r\n\r\nwindow.addEventListener('hashchange', urlReroute);\r\nwindow.addEventListener('popstate', urlReroute);\r\n\r\n// 保留原有的事件\r\nconst originalAddEventListener = window.addEventListener;\r\nconst originalRemoveEventListener = window.removeEventListener;\r\n\r\nwindow.addEventListener = function (eventName, fn) {\r\n  // 当事件存在需要捕获的，并且未被捕获过\r\n  if (\r\n    routingEventsListeningTo.indexOf(eventName) >= 0 &&\r\n    !capturedEventListeners[eventName].some((listener) => listener == fn)\r\n  ) {\r\n    capturedEventListeners[eventName].push(fn);\r\n    return;\r\n  }\r\n  return originalAddEventListener.apply(this, arguments);\r\n};\r\n\r\nwindow.removeEventListener = function (eventName, fn) {\r\n  if (routingEventsListeningTo.indexOf(eventName) >= 0) {\r\n    capturedEventListeners[eventName] = capturedEventListeners[\r\n      eventName\r\n    ].filter((l) => l !== fn);\r\n    return;\r\n  }\r\n  return originalRemoveEventListener.apply(this, arguments);\r\n};\r\n\r\n// 如果是hash路由 hash变化时可以切换\r\n// 浏览器路由，浏览器是由 h5 API的，如果切换时不会触发popstate，所以需要重写浏览器切换的方法\r\n\r\nfunction patchedUpdateState(updateState, methodName) {\r\n  return function () {\r\n    // 获取切换之前的路由\r\n    const urlBefore = window.location.href;\r\n    // 调用原生的切换页面的方法\r\n    updateState.apply(this, arguments);\r\n    // 获取切换之后的路由\r\n    const urlAfter = window.location.href;\r\n    if (urlBefore !== urlAfter) {\r\n      urlReroute(new PopStateEvent('popstate'));\r\n    }\r\n  };\r\n}\r\nwindow.history.pushState = patchedUpdateState(\r\n  window.history.pushState,\r\n  'pushState'\r\n);\r\nwindow.history.replaceState = patchedUpdateState(\r\n  window.history.replaceState,\r\n  'replaceState'\r\n);\r\n\r\n// 用户可能还会绑定自己的路由事件 如vue应用中的路由\r\n\r\n// 当我们应用切换后，还需要处理原来的方法，并且是需要在应用切换后再执行\r\n","import { getAppChanges } from '../applications/app';\r\nimport { toBootstrapPromise } from '../lifecycles/bootstrap';\r\nimport { toLoadPromise } from '../lifecycles/load';\r\nimport { toUnmountPromise } from '../lifecycles/unmount';\r\nimport { toMountPromise } from '../lifecycles/mount';\r\nimport { started } from '../start';\r\n\r\nimport './navigator-events';\r\n\r\n/**\r\n * 核心应用处理方法\r\n */\r\nexport function reroute() {\r\n  // 需要获取要加载的应用\r\n\r\n  // 需要获取要被挂载的应用\r\n\r\n  // 哪些应用需要被卸载\r\n\r\n  const { appsToLoad, appsToMount, appsToUnmount } = getAppChanges();\r\n\r\n  //   console.log(appsToLoad, appsToMount, appsToUnmount);\r\n\r\n  if (started) {\r\n    // app 装载\r\n    // console.log('started');\r\n\r\n    return performAppChanges();\r\n  } else {\r\n    // 注册应用时， 需要预先加载\r\n    // console.log('register');\r\n    return loadApps();\r\n  }\r\n\r\n  /**\r\n   * 预加载应用\r\n   */\r\n  async function loadApps() {\r\n    // 获取到bootstrap、mount、unmount方法放到app上\r\n    let apps = await Promise.all(appsToLoad.map(toLoadPromise));\r\n    // console.log('apps :>> ', apps);\r\n  }\r\n\r\n  /**\r\n   * 根据路径来装载应用\r\n   */\r\n  async function performAppChanges() {\r\n    // 先卸载不需要的应用\r\n    let unmountPromses = appsToUnmount.map(toUnmountPromise);\r\n    // 去加载需要的应用\r\n    // 这里可能出现一种情况，当要加载app1的时候，这时候切换到app2了，那么app1其实就不需要加载了，这也需要做判断\r\n    appsToLoad.map(async (app) => {\r\n      // 将需要加载的应用拿到之后： 加载 => 启动 => 挂载\r\n      app = await toLoadPromise(app);\r\n      app = await toBootstrapPromise(app);\r\n      return await toMountPromise(app);\r\n    });\r\n\r\n    // 有些应用是之前就加载完毕的，这时候需要直接去挂载\r\n    appsToMount.map(async (app) => {\r\n      app = await toBootstrapPromise(app);\r\n      return await toMountPromise(app);\r\n    });\r\n  }\r\n}\r\n\r\n// 这个流程是用于初始化操作的，我们还需要做到当路由切换的时候重新加载应用\r\n\r\n// 重写路由相关的方法\r\n","import { reroute } from '../navigations/reroute';\r\nimport {\r\n  BOOTSTRAPPING,\r\n  LOADING_SOURCE_CODE,\r\n  MOUNTED,\r\n  NOT_BOOTSTRAPPED,\r\n  NOT_LOADED,\r\n  NOT_MOUNTED,\r\n  shouldBeActive,\r\n} from './app.helpers';\r\n\r\n// 用来存放所有的应用\r\nconst apps = [];\r\n\r\n// 维护应用所有的状态：状态机原理\r\n/**\r\n * 本质上做的是将传入的子应用组成一个对象存放到apps数组中\r\n * @param {*} appName 应用名字\r\n * @param {*} loadApp 加载的应用\r\n * @param {*} activeWhen 当激活时会调用loadApp\r\n * @param {*} customProps 自定义属性\r\n */\r\nexport function registerApplication(appName, loadApp, activeWhen, customProps) {\r\n  // 注册应用\r\n  apps.push({\r\n    name: appName,\r\n    loadApp,\r\n    activeWhen,\r\n    customProps,\r\n    status: NOT_LOADED,\r\n  });\r\n\r\n  //   console.log('apps :>> ', apps);\r\n\r\n  // 加载应用\r\n  reroute();\r\n\r\n  // vue一系列生命周期\r\n}\r\n\r\nexport function getAppChanges() {\r\n  // 要卸载的app\r\n  const appsToUnmount = [];\r\n  // 要加载的app\r\n  const appsToLoad = [];\r\n  // 需要挂载的app\r\n  const appsToMount = [];\r\n\r\n  // 根据app的不同的状态填装进不同的数组中\r\n  apps.forEach((app) => {\r\n    // 需不需要被加载\r\n    const appShouldBeActive = shouldBeActive(app);\r\n    switch (app.status) {\r\n      case NOT_LOADED:\r\n      case LOADING_SOURCE_CODE:\r\n        if (appShouldBeActive) {\r\n          appsToLoad.push(app);\r\n        }\r\n        break;\r\n      case NOT_BOOTSTRAPPED:\r\n      case BOOTSTRAPPING:\r\n      case NOT_MOUNTED:\r\n        if (appShouldBeActive) {\r\n          appsToMount.push(app);\r\n        }\r\n        break;\r\n      case MOUNTED:\r\n        if (!appShouldBeActive) {\r\n          appsToUnmount.push(app);\r\n        }\r\n        break;\r\n    }\r\n  });\r\n  return {\r\n    appsToMount,\r\n    appsToUnmount,\r\n    appsToLoad,\r\n  };\r\n}\r\n"],"names":[],"mappings":"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"}